,id,title,content,word_count,char_count,creation_date
1,10,22COC104 (Algorithm Analysis) feedback,"2022 â 2023 22COC104 Algorithms Analysis Exam Feedback1  The overall average for this year's exam is 51.01% with a standard deviation of 17.56. Last year the average was 67.27% with a standard deviation of 19.26, while two years ago average was 66.31% with a standard deviation of 12.91. A total of 73 students sat the exam. The maximum mark is 90%, while the minimum is 12%. Unfortunately, the exam was failed by 16 people, with only 9 of them getting minimal performance (at least 30%).   Below, you will find a graph with the distribution of the marks. As per the actual exam paper, here is a breakdown of how points could have been achieved.  Exercises 1 and 4, as well as the time and space complexities of the sorting  algorithm should have been known from Introduction to Algorithms (at least 16 points). Structural Induction (5 points) should have been known from Part A (Logic) or Part B (Formal Methods). That is a total of 21 already. Everyone should have known that a function running in parallel on p processors, can be serialised on a single one, with its time complexity being p times higher. Moreover, the shortest path has been discussed in at least 3 different occasions, and so has the Master Theorem. The SMA question is verbatim from the sample exam that was provided. These should have offered you the chance to get at least another 20 points. Everyone should know how a Heap is created and how the sorting works, and how you can find the number of sequences of a certain length without a certain pattern (again done during Part A). The Bin-Packing algorithm was literally spelled out in the question. That's another minimum of 22 points. Definition of NP-completeness and the cases of the Master Theorem (which is now done in Part A) would have bagged you another 4 to 8 points. Finally, you were asked to use to describe the MP and KMP tables of a word, and do a recursion, things we have discussed and at the time I have mentioned that they are going to likely be in the exam (especially the latter).",362,2027,2023-07-29 at 12:16
0,11,Article 8 of the Human Rights Act,"Article 8 of the Human Rights Act

Article 8 of the Human Rights Act enshrines the right for every person to have respect for their private and family life as well as their home and correspondence. It also guards against public authorities infringing on this right except within limited cases relating to national security, public safety, prevention of disorder or crime, protection of health or morals, the protection of the rights and freedoms of others as well as the economic well-being of the country.



Protecting the Userâs Private Life, Family Life and Home

Any smartwatch application would need to retain some critical information for the duration that the user has the app. This information may include the userâs email and password and personally identifiable information such as the userâs name and date of birth. To align with the article 8 of the Human Rights Act, this data would need to be retained in such a way that it respects the userâs private and family life as well as their home and correspondence.



The crux of any data retention policy should be that any user data should only be retained for as long as it is needed. Aside from creating unnecessary storage overhead for the appâs developer(s), storing sensitive user data for unduly long periods increases the likelihood that it will be misplaced, misused or mishandled. And if the data is no longer of any use or importance to the user, then it is almost certain that it will used for purposes that are not in the userâs best interest.



The userâs family adds another wrinkle of complexity with regards to the question of how data should be retained. While of course each individual in the family should have their privacy protected, depending on the nature of the smartwatch app, it might be the case that sensitive data needs to be shared amongst members of the family. Therefore, the smartwatch app would need to have a âcollectiveâ data retention policy for userâs that are related or connected to each other in some way. This is common in cloud services with many of them offering âfamily plansâ where data can be shared amongst close users. Once again, data would need to be retained for as long as it is necessary, but it is worth bearing in mind that data that is useless to one family member may still be useful to another.



Communication Data

As aforementioned, article 8 of the Human Rights Act protects the userâs right to privacy of correspondence. Any communications that the user has should be known only to the user and the individuals they are communicating with. The best way to ensure that this part of article 8 is not infringed upon would be to put the appâs communication data retention functionality firmly in the control of the user. The app should have a hands-off policy when it comes to tracking or retaining the userâs communication data; by default, the user should be opted out of any such data retention program and have to explicitly opt in.



Communication data â or access to communication data â should be given to the app with the explicit permission of the user and it should be removed from the app when it is no longer needed. For example, many applications with a social element will oblige the user to provide a list of contacts (usually from the default contacts app on their device) in order to find other user accounts on the applicationâs user network. If the smartwatch app includes such functionality, then it should be the case that when the contact list is provided by the user, the list should be deleted as soon as the user has connected to all of the accounts associated with the contact list, unless the user explicitly states otherwise in the appâs settings. 



Public Authorities

The second clause of article 8 protects the userâs data privacy from public authorities â with some reasonable exceptions. As such, the smartwatch app must safeguard against the use, storage, and access of any part of the userâs data by public authorities. No data whatsoever should be given to public authorities unless there are legitimate reasons to do so that are in line with article 8 of the Human Rights Act.



Furthermore, the appâs data retention policies should go further and cover all possible circumstances where this part of article 8 may be violated. For instance, with regards to storage, it would be prudent for the app to have a policy of avoiding storing retained user data on services, platforms or hardware infrastructure that is either partially or fully controlled by public authorities, funded or maintained by public authorities or easily accessible by public authorities. Minimising the number opportunities where public authorities can access user data without the userâs consent or without valid reasons is the best way to uphold the second clause of article 8.



User Consent

Whilst the proposed data retention policies for the smartwatch app would do well to protect the userâs privacy and avoid any violation of article 8 of the Human Rights Act, there is a more insidious problem that could undermine these policies: a lack of awareness on the part of the user. In theory, in order to be able to use an application, a user needs to consent to the developer's terms and conditions, including their privacy policy. However, in practice, users have little option but to consent to the collection and processing of their personal data in order to use the application. Theyâre also often coerced into making decisions that jeopardise their data privacy. For this smartwatch app it would be useful for it to contain some kind of easy-to-use and accessible feature(s) that helps users to actually understand the privacy policies which describe how their data is collected, processed and retained. It should make clear in no uncertain terms how their data is stored, what data should be stored (or archived), where that should happen, and for exactly how long.

________________________



Legislation.gov.uk. 2022. Human Rights Act 1998. [online] Available at: <https://www.legislation.gov.uk/ukpga/1998/42/schedule/1/part/I/chapter/7> [Accessed 21 April 2022].

Egnyte.com. 2022. Data Retention 101: Policies and Best Practices | Egnyte. [online] Available at: <https://www.egnyte.com/guides/governance/data-retention> [Accessed 21 April 2022].

2022. [online] Available at: <https://publications.parliament.uk/pa/jt201919/jtselect/jtrights/122/12203.htm> [Accessed 22 April 2022].

Long, W. and Shankar, V., 2016. The impact of the GDPR on the retention of personal data. [ebook] Available at: <https://www.sidley.com/~/media/publications/cslp-september-2016-1516.pdf> [Accessed 22 April 2022].

General Data Protection Regulation (GDPR). 2022. Art. 5 GDPR â Principles relating to processing of personal data - General Data Protection Regulation (GDPR). [online] Available at: <https://gdpr-info.eu/art-5-gdpr/> [Accessed 23 April 2022].

General Data Protection Regulation (GDPR). 2022. Art. 7 GDPR â Conditions for consent - General Data Protection Regulation (GDPR). [online] Available at: <https://gdpr-info.eu/art-7-gdpr/> [Accessed 23 April 2022].",1132,7165,2023-07-29 at 12:16
2,12,New Document,Yo! check out my new document!,6,30,2023-07-29 at 12:17
3,13,random,"Callback Basics
---------------
Callbacks are a way of retrieving the values of UI components; e.g. the text
inside a form or the numerical value of a slider. Callbacks functions are 
automatically called whenever an input UI component's property changes, in 
order to update some property in another UI component (the output).
Syntax guide
------------
@app.callback(...) <-- function decorator containing all of the input and
                       output UI components.
Input(component-id, property) <-- this selects a given UI component by its ID
                                  and reads the value of the chosen property
                                  into the function. This is used as a trigger
                                  for your callback function run; when the value
                                  of 'property' in this UI component changes the
                                  function will be called.
State(component-id, property) <-- this works just like Input(component-id, property).
                                  the only difference is that this will not trigger
                                  your callback function. This is useful when you just
                                  want to get the value of a UI component property
                                  without changing the value of the property.
Output(component-id, property) <-- this selects a given UI component by its ID
                                   and changes the value of the selected property
                                   to whatever value was output by the callback
                                   function.
IMPORTANT: the order in which you specify input and output UI components is
           crucial. Always specify the output components before the input
           components. And always make sure that there is atleast 1 output
           component and at least 1 input component in the style Input(id, prop).
           If you don't do this, your callback function will not work.
In order to fully understand what each callback function does you can look at 
the ids of the UI components specified in @app.callback() and then find those 
components in the part of the code where those UI components are created.
For more info on how callback functions work you can visit the following links:
    * https://dash.plotly.com/basic-callbacks
    * https://dash.plotly.com/sharing-data-between-callbacks
    * https://dash.plotly.com/advanced-callbacks",324,2477,2023-07-29 at 12:18
